{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/employee.service.ts","webpack:///./src/app/employees/create-employee.component.css","webpack:///./src/app/employees/create-employee.component.html","webpack:///./src/app/employees/create-employee.component.ts","webpack:///./src/app/employees/list-employees.component.css","webpack:///./src/app/employees/list-employees.component.html","webpack:///./src/app/employees/list-employees.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"\\n<nav class=\\\"navbar navbar-fixed-top navbar-light navbar-expand-md bg-light justify-content-center\\\">\\n  <a href=\\\"/\\\" class=\\\"navbar-brand mr-0\\\">Grangular - Home</a>\\n\\n   <div class=\\\"navbar-collapse collapse justify-content-between align-items-center w-100\\\" id=\\\"collapsingNavbar2\\\">\\n    <ul class=\\\"navbar-nav mx-auto text-center\\\">\\n\\n      <li class=\\\"nav-item\\\">\\n        <a class=\\\"nav-link text-dark\\\" routerLink=\\\"list\\\">\\n          Employee Management\\n        </a>\\n      </li>\\n      <!--\\n      <li class=\\\"nav-item\\\">\\n        <a class=\\\"nav-link text-dark\\\" routerLink=\\\"create\\\">\\n          New Menu Item\\n        </a>\\n      </li>\\n      -->\\n    </ul>\\n  </div>\\n</nav>\\n<router-outlet></router-outlet>\\n\\n\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'client';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\n//Router Module.\nimport { RouterModule, Routes } from '@angular/router';\n\n//HttpClientModule\nimport {HttpClientModule} from '@angular/common/http';\n\nimport { AngularFontAwesomeModule } from 'angular-font-awesome';\n\n\n//Employee Service.\nimport { EmployeeService } from './employee.service';\n\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\n\n//PrimenG\nimport { DataTableModule } from 'primeng/primeng';\nimport {TableModule} from 'primeng/table';\nimport { AccordionModule } from 'primeng/primeng';\nimport { PanelModule } from 'primeng/primeng';\nimport { ButtonModule } from 'primeng/primeng';\nimport { RadioButtonModule } from 'primeng/primeng';\nimport {PaginatorModule} from 'primeng/paginator';\nimport {CalendarModule} from \"primeng/primeng\";\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport {DialogModule} from \"primeng/dialog\";\nimport {MenubarModule} from 'primeng/menubar';\nimport {MenuItem} from 'primeng/api';\n\nimport { AppComponent } from './app.component';\nimport { ListEmployeesComponent } from './employees/list-employees.component';\nimport { CreateEmployeeComponent } from './employees/create-employee.component';\n\n\n// Each route maps a URL path to a component\n// The 3rd route specifies the route to redirect to if the path\n// is empty. In our case we are redirecting to /list\n\n// pathMatch property value can be full or prefix. For now we\n// will set it to full as we want to do a full match\nconst appRoutes: Routes = [\n  { path: 'list', component: ListEmployeesComponent },\n  { path: 'create', component: CreateEmployeeComponent },\n  { path: '', redirectTo: '/list', pathMatch: 'full' }\n];\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ListEmployeesComponent,\n    CreateEmployeeComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    ReactiveFormsModule,\n    RouterModule.forRoot(appRoutes),\n    FormsModule,\n    DataTableModule,\n    AngularFontAwesomeModule,\n    TableModule,\n    DataTableModule,\n    AccordionModule,\n    PanelModule,\n    ButtonModule,\n    RadioButtonModule,\n    BrowserAnimationsModule,\n    DialogModule,\n    PaginatorModule,\n    CalendarModule\n  ],\n  providers: [EmployeeService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","// employee.service.ts.\n\n\n//http://localhost:3000/employee/1 GET\n//http://localhost:3000/employee/1 PUT\n//http://localhost:3000/employee POST\n//http://localhost:3000/employee/1 DELETE\n//http://localhost:3000/employee GET\n\nimport { Injectable } from '@angular/core';\nimport {HttpClient, HttpErrorResponse, HttpHeaders, HttpParams} from '@angular/common/http';\nimport {Observable, of, pipe} from \"rxjs/index\";\nimport { map, catchError, tap } from 'rxjs/operators';\nimport {Employee} from \"./models/employee.model\";\n\n\n@Injectable()\nexport class EmployeeService {\n   API_URL = 'http://localhost:8080';\n\n\n    constructor(private httpClient: HttpClient) { }\n\n  /**\n   * Get all employees\n   * @returns {Observable<Object>}\n   */\n  getEmployees() {\n        return this.httpClient.get(`${this.API_URL}/employee`);\n    }\n\n  /**\n   * Get employee by ID\n   * @param id\n   * @returns {Observable<any>}\n   */\n    getEmployee(id): Observable<any> {\n      return this.httpClient.get(`${this.API_URL}/employee/`+id);\n    }\n\n  /**\n   * Delete employee by ID\n   * @param id\n   * @returns {Observable<any>}\n   */\n    deleteEmployee(id):Observable<any>{\n        return this.httpClient.delete(`${this.API_URL}/employee/`+id)\n    }\n\n\n  /**\n   * Add new employee\n   * @param employee\n   * @returns {Observable<any>}\n   */\n  addEmployee(employee):Observable<any>{\n         return this.httpClient.post<Employee>(`${this.API_URL}/employee`, employee )\n     }\n\n\n  /**\n   * Update employee\n   * @param employee\n   * @returns {Observable<any>}\n   */\n  updateEmployee(employee):Observable<any>{\n\n    return this.httpClient.put<Employee>(`${this.API_URL}/employee/`+employee.id, employee )\n\n  }\n\n}\n\n","module.exports = \"\"","module.exports = \"<p>\\n  create-employee works!\\n</p>\\n\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-create-employee',\n  templateUrl: './create-employee.component.html',\n  styleUrls: ['./create-employee.component.css']\n})\nexport class CreateEmployeeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\\r\\n\"","module.exports = \"\\n<!--\\n<table class=\\\"table table-bordered\\\" [mfData]=\\\"employees\\\" #mf=\\\"mfDataTable\\\" [mfRowsOnPage]=\\\"5\\\">\\n    <thead>\\n        <tr>\\n          <th class=\\\"text-center\\\"> <mfDefaultSorter [by]=\\\"sortByNumber('id')\\\">Id</mfDefaultSorter></th>\\n            <th class=\\\"text-center\\\">Name</th>\\n            <th class=\\\"text-center\\\">City</th>\\n            <th class=\\\"text-center\\\">Gender</th>\\n            <th class=\\\"text-center\\\">Department</th>\\n            <th class=\\\"text-center\\\">Delete</th>\\n        </tr>\\n    </thead>\\n    <tbody>\\n        <tr *ngFor=\\\"let employee of mf.data\\\">\\n            <td class=\\\"text-center\\\">{{employee.id*1}}</td>\\n          <td class=\\\"text-center\\\">{{employee.name}}</td>\\n            <td class=\\\"text-center\\\">{{employee.city}}</td>\\n            <td class=\\\"text-center\\\">{{employee.gender}}</td>\\n            <td class=\\\"text-center\\\">{{employee.department}}</td>\\n            <td class=\\\"text-center\\\">\\n              <button (click)=\\\"deleteEmployee(employee.id)\\\"><i class=\\\"fa fa-trash-o\\\"  style=\\\"color:red\\\"></i></button>\\n\\n\\n            </td>\\n        </tr>\\n    </tbody>\\n  <tfoot>\\n  <tr>\\n    <td colspan=\\\"6\\\">\\n      <mfBootstrapPaginator [rowsOnPageSet]=\\\"[5,10,25]\\\"></mfBootstrapPaginator>\\n    </td>\\n  </tr>\\n  </tfoot>\\n\\n\\n</table>\\n-->\\n\\n\\n<p-table [columns]=\\\"cols\\\" [value]=\\\"employees\\\" selectionMode=\\\"single\\\" [(selection)]=\\\"selectedEmployee\\\" (onRowSelect)=\\\"onRowSelect($event)\\\" [paginator]=\\\"true\\\" [rows]=\\\"10\\\" #dt exportFilename=\\\"employees\\\"   [responsive]=\\\"true\\\">\\n\\n  <ng-template pTemplate=\\\"caption\\\">\\n    List of Employees\\n  </ng-template>\\n\\n\\n\\n\\n  <ng-template pTemplate=\\\"header\\\" let-columns>\\n    <tr>\\n      <th *ngFor=\\\"let col of columns\\\" [pSortableColumn]=\\\"col.field\\\">\\n        {{col.header}}\\n        <p-sortIcon [field]=\\\"col.field\\\"></p-sortIcon>\\n      </th>\\n    </tr>\\n  </ng-template>\\n\\n  <!--\\n  <ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\">\\n    <tr [pSelectableRow]=\\\"rowData\\\">\\n      <td *ngFor=\\\"let col of columns\\\">\\n        {{rowData[col.field]}}\\n      </td>\\n    </tr>\\n  </ng-template>\\n  -->\\n\\n  <ng-template pTemplate=\\\"body\\\" let-rowData>\\n    <tr [pSelectableRow]=\\\"rowData\\\">\\n      <td>\\n        {{rowData.id}}\\n      </td>\\n\\n      <td>\\n        {{rowData.name}}\\n      </td>\\n      <td>\\n        {{rowData.city}}\\n      </td>\\n      <td>\\n        {{rowData.gender}}\\n      </td>\\n      <td>\\n        {{rowData.department}}\\n      </td>\\n      <td>\\n        {{rowData.hireDate | date: 'MM/dd/yyyy'}}\\n      </td>\\n\\n    </tr>\\n  </ng-template>\\n\\n\\n  <ng-template pTemplate=\\\"summary\\\" let-rowData>\\n    <div style=\\\"text-align:left\\\">\\n      <button type=\\\"button\\\" pButton icon=\\\"fa fa-plus\\\" (click)=\\\"showDialogToAdd()\\\" label=\\\"Add\\\"></button>\\n\\n      <button type=\\\"button\\\" pButton icon=\\\"fa fa-file\\\"  label=\\\"CSV\\\" (click)=\\\"dt.exportCSV()\\\"></button>\\n\\n    </div>\\n  </ng-template>\\n\\n</p-table>\\n\\n\\n<p-dialog id=\\\"empDialog\\\" header=\\\"Employee Details\\\" [(visible)]=\\\"displayDialog\\\" [responsive]=\\\"true\\\" showEffect=\\\"fade\\\" [modal]=\\\"true\\\" [width]=\\\"500\\\" >\\n\\n  <div class=\\\"ui-g ui-fluid\\\" *ngIf=\\\"employee\\\">\\n    <div class=\\\"ui-g-12 form-group\\\" *ngIf=\\\"employee.id\\\">\\n      <div class=\\\"ui-g-4\\\">\\n        <label for=\\\"id\\\">ID</label>\\n      </div>\\n      <div class=\\\"ui-g-8\\\">\\n        <input pInputText id=\\\"id\\\" [(ngModel)]=\\\"employee.id\\\" readonly autocomplete=\\\"off\\\" class=\\\"text-dark\\\" name=\\\"id\\\">\\n      </div>\\n    </div>\\n    <div class=\\\"ui-g-12 form-group\\\">\\n      <div class=\\\"ui-g-4\\\">\\n        <label for=\\\"name\\\">Name</label>\\n      </div>\\n      <div class=\\\"ui-g-8\\\">\\n        <input pInputText id=\\\"name\\\" name=\\\"name\\\" [(ngModel)]=\\\"employee.name\\\" autocomplete=\\\"off\\\" class=\\\"text-dark\\\"  #name=\\\"ngModel\\\" />\\n\\n      </div>\\n    </div>\\n    <div class=\\\"ui-g-12 form-group\\\">\\n      <div class=\\\"ui-g-4\\\">\\n        <label for=\\\"city\\\">City</label>\\n      </div>\\n      <div class=\\\"ui-g-8\\\">\\n        <input pInputText id=\\\"city\\\" name=\\\"city\\\" [(ngModel)]=\\\"employee.city\\\" autocomplete=\\\"off\\\" class=\\\"text-dark\\\"  #city=\\\"ngModel\\\" />\\n\\n      </div>\\n    </div>\\n    <div class=\\\"ui-g-12 form-group\\\">\\n      <div class=\\\"ui-g-4\\\">\\n        <label for=\\\"department\\\">Department</label>\\n      </div>\\n      <div class=\\\"ui-g-8\\\">\\n        <input pInputText id=\\\"department\\\" name=\\\"department\\\" [(ngModel)]=\\\"employee.department\\\" autocomplete=\\\"off\\\" class=\\\"text-dark\\\"  #department=\\\"ngModel\\\"  />\\n      </div>\\n    </div>\\n\\n    <div class=\\\"ui-g-12 form-group\\\">\\n      <div class=\\\"ui-g-4\\\">\\n        <label for=\\\"gender\\\">Gender</label>\\n      </div>\\n      <div class=\\\"ui-g-8\\\">\\n        <input pInputText id=\\\"gender\\\" name=\\\"gender\\\" [(ngModel)]=\\\"employee.gender\\\" autocomplete=\\\"off\\\" class=\\\"text-dark\\\"  #gender=\\\"ngModel\\\" />\\n      </div>\\n    </div>\\n\\n    <div class=\\\"ui-g-12\\\">\\n      <div class=\\\"ui-g-4\\\">\\n        <label for=\\\"hireDate\\\">Hire Date</label>\\n      </div>\\n      <div class=\\\"ui-g-8\\\">\\n        <p-calendar [(ngModel)]=\\\"employee.hireDate\\\" id=\\\"hireDate\\\" name=\\\"hireDate\\\"  mode=\\\"inline\\\"></p-calendar>\\n      </div>\\n    </div>\\n\\n\\n  </div>\\n\\n  <p-footer >\\n    <div class=\\\"ui-dialog-buttonpane ui-helper-clearfix\\\" *ngIf=\\\"employee\\\">\\n      <button type=\\\"button\\\" *ngIf=\\\"employee.id\\\" pButton icon=\\\"fa fa-close\\\" (click)=\\\"delete()\\\" label=\\\"Delete\\\"></button>&nbsp;\\n      <button type=\\\"button\\\" pButton icon=\\\"fa fa-close\\\" (click)=\\\"save()\\\" label=\\\"Save\\\"></button>&nbsp;\\n\\n    </div>\\n  </p-footer>\\n\\n\\n\\n</p-dialog>\\n\\n\\n\\n\\n\"","import { Component, OnInit } from '@angular/core';\nimport { Employee } from '../models/employee.model';\n\n// Import EmployeeService\nimport { EmployeeService } from '../employee.service';\n\n@Component({\n  selector: 'app-list-employees',\n  templateUrl: './list-employees.component.html',\n  styleUrls: ['./list-employees.component.css']\n})\nexport class ListEmployeesComponent implements OnInit {\n  employees: Employee[] = [];\n  selectedEmployees: Employee[];\n  cols: any[];\n\n  selectedEmployee: Employee;\n  displayDialog: boolean;\n  employee: Employee ;\n  newEmployee: boolean;\n\n  constructor(private _employeeService: EmployeeService) { }\n\n  /**\n   * NgOnInit\n   */\n  ngOnInit() {\n    this.getEmployees();\n    this.cols = [\n      { field: 'id', header: 'ID' },\n      { field: 'name', header: 'Name' },\n      { field: 'city', header: 'City' },\n      { field: 'gender', header: 'Gender' },\n      { field: 'department', header: 'Department' },\n      { field: 'hireDate', header: 'Hire Date' }\n    ];\n\n  }\n\n  /**\n   * Get all employees\n   */\n  public getEmployees() {\n    this._employeeService.getEmployees().subscribe((data: Employee[]) => {\n      this.employees = data;\n    });\n\n  }\n\n  /**\n   * Delete employee\n   * @param employee\n   */\n  delete(employee){\n    let index = this.employees.indexOf(this.selectedEmployee);\n    //this.employees = this.employees.filter((val, i) => i != index);\n    this._employeeService.deleteEmployee(this.selectedEmployee.id).subscribe(\n      (msg) => this.getEmployees(),\n      (error) => console.log(error)\n    );\n    this.employee = null;\n    this.displayDialog = false;\n  }\n\n  public sortByNumber = (a: any) => {\n    return new Function('a', 'return +a.' + a + '.valueOf()');\n  }\n\n  /**\n   * Show Add Dialog\n   */\n  showDialogToAdd() {\n    this.newEmployee = true;\n    this.employee = {} as Employee;\n    this.displayDialog = true;\n  }\n\n  /**\n   * Save (update or add) employee\n   */\n  save() {\n    let employess = [...this.employees];\n\n    if (this.newEmployee){\n      //this.employees.push(this.employee);\n      console.log(this.employee.name)\n      console.log(this.employee.hireDate)\n\n      this._employeeService.addEmployee(this.employee).subscribe(\n        (msg) => this.getEmployees(),\n        (error) => console.log(\"Error during add \" + error)\n      );\n    }\n    else{\n      this._employeeService.updateEmployee(this.employee).subscribe(\n        (msg) => console.log(msg),\n        (error) => console.log(error)\n      );\n      employess[this.employees.indexOf(this.selectedEmployee)] = this.employee\n\n    }\n    this.employees = employess;\n    this.employee = null;\n    this.displayDialog = false;\n  }\n\n  /**\n   * Update selected row.\n   * @param event\n   */\n  onRowSelect(event) {\n    this.newEmployee = false;\n    this.employee = this.cloneEmployee(event.data);\n    this.displayDialog = true;\n  }\n\n  /**\n   * Clone emp obj\n   * @param {Employee} c\n   * @returns {Employee}\n   */\n  cloneEmployee(c: Employee): Employee {\n    let employee = {} as Employee;\n    for (let prop in c) {\n      employee[prop] = c[prop];\n    }\n    //p-calendar workaround.\n    //https://github.com/primefaces/primeng/issues/5074\n    employee.hireDate = new Date(employee.hireDate)\n\n    return employee;\n  }\n\n  exportCSV(dataTable) {\n    dataTable.exportCSV();\n  }\n\n\n\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, for easier debugging, you can ignore zone related error\n * stack frames such as `zone.run`/`zoneDelegate.invokeTask` by importing the\n * below file. Don't forget to comment it out in production mode\n * because it will have a performance impact when errors are thrown\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}